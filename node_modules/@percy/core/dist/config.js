"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.migration = migration;
exports.schema = void 0;
// Common options used in Percy commands
const schema = {
  snapshot: {
    type: 'object',
    additionalProperties: false,
    properties: {
      widths: {
        type: 'array',
        items: {
          type: 'integer'
        },
        default: [375, 1280]
      },
      minHeight: {
        type: 'integer',
        default: 1024
      },
      percyCSS: {
        type: 'string',
        default: ''
      },
      requestHeaders: {
        type: 'object',
        additionalProperties: {
          type: 'string'
        }
      },
      authorization: {
        type: 'object',
        additionalProperties: false,
        properties: {
          username: {
            type: 'string'
          },
          password: {
            type: 'string'
          }
        }
      },
      enableJavaScript: {
        type: 'boolean'
      }
    }
  },
  discovery: {
    type: 'object',
    additionalProperties: false,
    properties: {
      allowedHostnames: {
        type: 'array',
        items: {
          type: 'string'
        },
        default: []
      },
      networkIdleTimeout: {
        type: 'integer',
        default: 100
      },
      disableCache: {
        type: 'boolean',
        default: false
      },
      concurrency: {
        type: 'integer'
      },
      launchOptions: {
        type: 'object',
        additionalProperties: false,
        properties: {
          executable: {
            type: 'string'
          },
          timeout: {
            type: 'integer'
          },
          args: {
            type: 'array',
            items: {
              type: 'string'
            }
          },
          headless: {
            type: 'boolean'
          }
        }
      }
    }
  }
}; // Migration function

exports.schema = schema;

function migration(input, set) {
  /* eslint-disable curly */
  if (input.version < 2) {
    var _input$agent, _input$agent$assetDis, _input$agent2, _input$agent2$assetDi, _input$agent3, _input$agent3$assetDi, _input$agent4, _input$agent4$assetDi, _input$agent5, _input$agent5$assetDi;

    // previous snapshot options map 1:1
    if (input.snapshot != null) set('snapshot', input.snapshot); // request-headers option moved

    if (((_input$agent = input.agent) === null || _input$agent === void 0 ? void 0 : (_input$agent$assetDis = _input$agent.assetDiscovery) === null || _input$agent$assetDis === void 0 ? void 0 : _input$agent$assetDis.requestHeaders) != null) set('snapshot.requestHeaders', input.agent.assetDiscovery.requestHeaders); // allowed-hostnames moved

    if (((_input$agent2 = input.agent) === null || _input$agent2 === void 0 ? void 0 : (_input$agent2$assetDi = _input$agent2.assetDiscovery) === null || _input$agent2$assetDi === void 0 ? void 0 : _input$agent2$assetDi.allowedHostnames) != null) set('discovery.allowedHostnames', input.agent.assetDiscovery.allowedHostnames); // network-idle-timeout moved

    if (((_input$agent3 = input.agent) === null || _input$agent3 === void 0 ? void 0 : (_input$agent3$assetDi = _input$agent3.assetDiscovery) === null || _input$agent3$assetDi === void 0 ? void 0 : _input$agent3$assetDi.networkIdleTimeout) != null) set('discovery.networkIdleTimeout', input.agent.assetDiscovery.networkIdleTimeout); // page pooling was rewritten to be a concurrent task queue

    if (((_input$agent4 = input.agent) === null || _input$agent4 === void 0 ? void 0 : (_input$agent4$assetDi = _input$agent4.assetDiscovery) === null || _input$agent4$assetDi === void 0 ? void 0 : _input$agent4$assetDi.pagePoolSizeMax) != null) set('discovery.concurrency', input.agent.assetDiscovery.pagePoolSizeMax); // cache-responses was renamed to match the CLI flag

    if (((_input$agent5 = input.agent) === null || _input$agent5 === void 0 ? void 0 : (_input$agent5$assetDi = _input$agent5.assetDiscovery) === null || _input$agent5$assetDi === void 0 ? void 0 : _input$agent5$assetDi.cacheResponses) != null) set('discovery.disableCache', !input.agent.assetDiscovery.cacheResponses);
  }
}